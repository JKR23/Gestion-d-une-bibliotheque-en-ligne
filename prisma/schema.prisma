// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int           @id @default(autoincrement())
  firstName     String        
  lastName      String        
  email         String        @unique
  password      String        
  role          Role          @default(USER)
  address       Address?      @relation(fields: [addressId], references: [id]) // Ajout de la relation avec l'adresse
  addressId     Int?          @unique // Référence à l'adresse
  reservations  Reservation[] 
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Address {
  id            Int       @id @default(autoincrement())
  street        String
  city          String
  state         String
  postalCode    String
  user          User?     @relation
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Book {
  id            Int       @id @default(autoincrement())
  title         String
  author        String
  description   String?
  stock         Int
  genre         String    // Genre du livre
  isAvailable   Boolean   @default(true)  // Indique si le livre est disponible
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  reservations  Reservation[]
}

model Reservation {
  id            Int                 @id @default(autoincrement())
  userId        Int
  bookId        Int
  reservedAt    DateTime            @default(now())  // La date à laquelle la réservation a été faite
  reservedUntil DateTime            // La date jusqu'à laquelle la réservation est valide
  status        ReservationStatus   @default(PENDING)
  user          User                @relation(fields: [userId], references: [id])
  book          Book                @relation(fields: [bookId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
}
